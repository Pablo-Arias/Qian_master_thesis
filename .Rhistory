sid = as.character(sid),
user_id = as.character(user_id)
)
# 筛选主表中对应 question 的子集并合并
data_q <- all_data_df %>%
filter(question_content == question) %>%
left_join(
srm_df[, c("sid", "user_id", "measure.p", "measure.t")],
by = c("sid", "user_id")
)
merged_chunks[[question]] <- data_q
} else {
message(paste("⚠️ 文件未找到:", file_path, "- 已跳过该项"))
# 无文件也保留数据并填入 NA
merged_chunks[[question]] <- all_data_df %>%
filter(question_content == question) %>%
mutate(relationship = NA)
}
}
# 5. 合并所有部分
all_data_srm <- bind_rows(merged_chunks)
# 6. 保存最终数据
write_csv(all_data_srm, "all_data_srm_all.csv")
message("🎉 所有可用效应已成功合并到 all_data_srm_all.csv")
#去重
library(dplyr)
library(readr)
# 读取数据
df <- read_csv("all_data_srm_all.csv")
# 按 sid 和 user_id 分组，保留第一条记录（因 perceiver/target_effect 相同）
df_unique <- df %>%
group_by(sid, user_id , question_content) %>%
slice(1) %>%
ungroup()
# 保存去重结果（可选）
write_csv(df_unique, "all_data_srm_unique.csv")
message("✅ 已完成按 sid + user_id 去重并保留唯一行。")
#画图
# 加载必要包
library(ggplot2)
library(dplyr)
# 读取数据（假设你已经用 read.csv() 读入为 df）
df <- read.csv("all_data_srm_unique.csv")
ggplot(df, aes(x = question_content, y = measure.p)) +
geom_boxplot(fill = "lightblue", alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.4, color = "black") +
theme_minimal() +
labs(title = "measure.p by Question Content",
x = "Question Content",
y = "pe")
#画图
# 加载必要包
library(ggplot2)
library(dplyr)
# 读取数据（假设你已经用 read.csv() 读入为 df）
df <- read.csv("all_data_srm_unique.csv")
ggplot(df, aes(x = question_content, y = measure.t)) +
geom_boxplot(fill = "lightblue", alpha = 0.7) +
geom_jitter(width = 0.2, alpha = 0.4, color = "black") +
theme_minimal() +
labs(title = "measure.p by Question Content",
x = "Question Content",
y = "pe")
#小提琴图
# 加载必要的包
library(ggplot2)
# 读取数据（假设你已将数据读入为 df）
df <- read.csv("all_data_srm_unique.csv")
# 绘制箱线图
df %>%
drop_na(question_content) %>%
mutate(question_content = factor(question_content,
levels = c("liked", "other_liked","conversation_quality","video_conf_quality"))) %>%
ggplot(aes(y = target_effect, x = question_content, fill = question_content)) +
geom_boxplot() +
scale_y_continuous(name = "Interest score (1-7)",
breaks = c(1:7)) +
scale_fill_viridis_d(option = "E",
alpha = 0.6) +
guides(fill = "none")
#小提琴图
# 加载必要的包
library(ggplot2)
# 读取数据（假设你已将数据读入为 df）
df <- read.csv("all_data_srm_unique.csv")
# 绘制箱线图
df %>%
drop_na(question_content) %>%
mutate(question_content = factor(question_content,
levels = c("liked", "other_liked","conversation_quality","video_conf_quality"))) %>%
ggplot(aes(y = measure.p, x = question_content, fill = question_content)) +
geom_boxplot() +
scale_y_continuous(name = "Interest score (1-7)",
breaks = c(1:7)) +
scale_fill_viridis_d(option = "E",
alpha = 0.6) +
guides(fill = "none")
#柱状图
# 读取数据（假设你已将数据读入为 df）
df <- read.csv("all_data_srm_unique.csv")
# 加载必要包
library(ggplot2)
library(dplyr)
# 假设你的数据框名为 df
# 1. 计算每个 question_content 的平均值
mean_df <- df %>%
group_by(question_content) %>%
summarise(mean_measure_p = mean(measure.t, na.rm = TRUE))
View(mean_df)
ggplot(mean_df, aes(x = question_content, y = mean_measure_p)) +
geom_col(fill = "skyblue") +
geom_text(aes(label = signif(mean_measure_p, 3)), vjust = -0.5) +
theme_minimal() +
labs(title = "Mean of measure.p by Question Content",
x = "Question Content",
y = "Mean of measure.p") +
coord_cartesian(ylim = c(-0.01, 0.01)) +  # 手动设置y轴范围
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#读取原始数据 分析相关性
originaldata <- read_csv("data/behavior/srm/liked_effects.csv")
correlation(data = originaldata,
select = "measure.p",
select2 = "measure.t",
method = "spearman",
alternative = "two.sided")
#按照问题分组
library(purrr)
# 1. 按 question_content 分组
grouped <- df %>%
group_by(question_content) %>%
group_split()
# 2. 对每一组运行 correlation()
cor_list <- map(grouped, ~ correlation(select(., measure.p, measure.t), method = "spearman"))
# correlation  between measure.p and measure.t
#install.packages("correlation")  # 如果还没装
#查看总的correlation
library(correlation)
df <- read_csv("all_data_srm_unique.csv")
df %>%
ggplot(aes(x = measure.p, y = measure.t)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "measure.p",
breaks = c(1:9)) +
scale_y_continuous(name = " measure.t",
breaks = c(1:6))
correlation(data = df,
select = "measure.p",
select2 = "measure.t",
method = "spearman",
alternative = "two.sided")
#按照问题分组
library(purrr)
# 1. 按 question_content 分组
grouped <- df %>%
group_by(question_content) %>%
group_split()
# 2. 对每一组运行 correlation()
cor_list <- map(grouped, ~ correlation(select(., measure.p, measure.t), method = "spearman"))
# correlation  between measure.p and measure.t
#install.packages("correlation")  # 如果还没装
#查看总的correlation
library(correlation)
df <- read_csv("all_data_srm_unique.csv")
df %>%
ggplot(aes(x = measure.p, y = measure.t)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "measure.p",
breaks = c(1:9)) +
scale_y_continuous(name = " measure.t",
breaks = c(1:6))
correlation(data = df,
select = "measure.p",
select2 = "measure.t",
method = "spearman",
alternative = "two.sided")
#按照问题分组
library(purrr)
# 1. 按 question_content 分组
grouped <- df %>%
group_by(question_content) %>%
group_split()
# 2. 对每一组运行 correlation()
cor_list <- map(grouped, ~ correlation(select(., measure.p, measure.t), method = "spearman"))
#correlation  同一组AtoB 和Bto A
#calculate correlation
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(TripleR)
library(lme4)
library(lmerTest)
library(ggplot2)
library(correlation)
# 假设你的数据叫 df，且已加载
df <- read.csv("all_data_srm_all.csv")  # 替换为你的实际路径
# 创建标准 dyad（双向统一）
df <- df %>%
mutate(dyad_std = ifelse(as.character(user_id) < as.character(other_id),
paste(user_id, other_id, sep = "_"),
paste(other_id, user_id, sep = "_")))
# 只保留 measure（或 relationship）两个方向都存在的数据
df_wide <- df %>%
select(dyad_std, user_id, other_id, question_content, measure,relationship) %>%
pivot_wider(names_from = user_id, values_from = measure)  # 宽格式转化
# 或者另一种做法：配对并合并成 A→B 和 B→A 两行拼一行
df_paired <- df %>%
select(dyad_std, question_content, user_id, other_id, measure,relationship) %>%
group_by(dyad_std, question_content) %>%
filter(n() == 2) %>%
arrange(dyad_std, question_content, user_id) %>%
mutate(pair_id = paste0(dyad_std, "_", question_content)) %>%
summarise(question_content,
rel1 = first(measure),
rel2 = last(measure),
relationship1=first(relationship),
relationship2=last(relationship)
)
df_paired %>%
ggplot(aes(x = rel1, y = rel2)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "rel1",
breaks = c(1:9)) +
scale_y_continuous(name = " rel2",
breaks = c(1:6))
#存表
write.csv(df_paired, "data/behavior/srm/correlation.csv", row.names = FALSE)
#correlation  同一组AtoB 和Bto A  同一个问题的correlation
#calculate correlation
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(TripleR)
library(lme4)
library(lmerTest)
library(ggplot2)
library(correlation)
# 假设你的数据叫 df，且已加载
df <- read.csv("all_data_srm_all.csv")  # 替换为你的实际路径
# 创建标准 dyad（双向统一）
df <- df %>%
mutate(dyad_std = ifelse(as.character(user_id) < as.character(other_id),
paste(user_id, other_id, sep = "_"),
paste(other_id, user_id, sep = "_")))
# 只保留 measure（或 relationship）两个方向都存在的数据
df_wide <- df %>%
select(dyad_std, user_id, other_id, question_content, measure,relationship) %>%
pivot_wider(names_from = user_id, values_from = measure)  # 宽格式转化
# 或者另一种做法：配对并合并成 A→B 和 B→A 两行拼一行
df_paired <- df %>%
select(dyad_std, question_content, user_id, other_id, measure,relationship) %>%
group_by(dyad_std, question_content) %>%
filter(n() == 2) %>%
arrange(dyad_std, question_content, user_id) %>%
mutate(pair_id = paste0(dyad_std, "_", question_content)) %>%
summarise(question_content,
rel1 = first(measure),
rel2 = last(measure),
relationship1=first(relationship),
relationship2=last(relationship)
)
df_paired %>%
ggplot(aes(x = rel1, y = rel2)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "rel1",
breaks = c(1:9)) +
scale_y_continuous(name = " rel2",
breaks = c(1:6))
#存表
#write.csv(df_paired, "data/behavior/srm/correlation.csv", row.names = FALSE)
correlation(data = df_paired,
select = "rel1",
select2 = "rel2",
method = "spearman",
alternative = "two.sided")
library(correlation)
# 只取你要分析的列，构建一个简洁数据框
rel_data  <- df_paired %>% select(rel1, rel2)
# 使用 correlation() 明确说明列名，不让它自动分组
cor_result <- correlation(
data = rel_data,
method = "spearman"
)
print(cor_result)
library(purrr)
# 1. 按 question_content 分组
grouped <- df_paired %>%
group_by(question_content) %>%
group_split()
# 2. 对每一组运行 correlation()
cor_list <- map(grouped, ~ correlation(select(., rel1, rel2), method = "spearman"))
# 3. 加上分组名并组合成一个表
names(cor_list) <- sapply(grouped, function(x) unique(x$question_content))
cor_combined <- bind_rows(cor_list, .id = "question_content")
# 查看
print(cor_combined)
# 查看结果
print(cor_result)
# 计算配对相关性（每种 question_content 一次）
cor_results <- df_paired %>%
group_by(question_content) %>%
summarise(
correlation = cor(rel1, rel2, use = "complete.obs"),
n = n()
)
print(cor_results)
#计算关系 同一组AtoB 和Bto A
library(ggplot2)
library(correlation)
library(dplyr)
df <- read.csv("data/behavior/srm/correlation.csv")  # 替换为你的实际路径
df %>%
ggplot(aes(x = rel1, y = rel2)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "rel1",
breaks = c(1:9)) +
scale_y_continuous(name = " rel2",
breaks = c(1:6))
correlation(data = df,
select = "rel1",
select2 = "rel2",
method = "spearman",
alternative = "two.sided")
library(purrr)
#去重
df_unique <- df %>%
distinct(dyad_std, question_content, .keep_all = TRUE)
# 1. 按 question_content 分组
grouped <- df_unique %>%
group_by(question_content) %>%
group_split()
# 2. 对每一组运行 correlation()
cor_list <- map(grouped, ~ correlation(select(., rel1, rel2), method = "spearman"))
# 3. 加上分组名并组合成一个表
names(cor_list) <- sapply(grouped, function(x) unique(x$question_content))
cor_combined <- bind_rows(cor_list, .id = "question_content")
# 查看
print(cor_combined)
df_liked <- df %>%
filter(question_content == "liked")
df_liked %>%
ggplot(aes(x = rel1, y = rel2)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "rel1",
breaks = c(1:9)) +
scale_y_continuous(name = " rel2",
breaks = c(1:6))
correlation(data = df_liked,
select = "rel1",
select2 = "rel2",
method = "spearman",
alternative = "two.sided")
# 能否预测最终版本  这两个相关性应该是一样的吧 因为仅仅是交换纵坐标和横坐标
library(tidyverse)
# 读取数据
data <- read.csv("data/behavior/all_data_df.csv")  # 替换为你的文件路径
# 筛选 liked 和 other_liked 两种题目
filtered_data <- data %>%
filter(question_content %in% c("liked", "other_liked"))
# 将自己的 liked / other_liked 分别 pivot 为宽格式
own_wide <- filtered_data %>%
select(dyad, user_id, other_id, question_content, measure) %>%
pivot_wider(names_from = question_content, values_from = measure) %>%
rename(own_liked = liked, own_other_liked = other_liked)
# partner 的 liked 和 other_liked，交换 user_id 和 other_id
partner_wide <- filtered_data %>%
select(dyad, user_id, other_id, question_content, measure) %>%
pivot_wider(names_from = question_content, values_from = measure) %>%
rename(partner_liked = liked, partner_other_liked = other_liked) %>%
rename(user_id_partner = user_id, other_id_partner = other_id)
# 合并：按 dyad 和 user_id / other_id 匹配 partner 数据
merged_data <- own_wide %>%
left_join(partner_wide,
by = c("dyad" = "dyad", "user_id" = "other_id_partner", "other_id" = "user_id_partner"))
# 我是否能预测别人喜欢我
cor1 <- cor.test(merged_data$own_other_liked, merged_data$partner_liked, use = "complete.obs")
print(cor1)
# 别人是否能预测我喜欢他们
cor2 <- cor.test(merged_data$partner_other_liked, merged_data$own_liked, use = "complete.obs")
print(cor2)
cor.test(merged_data$partner_other_liked, merged_data$own_liked,
method = "spearman", use = "complete.obs")
cor.test(merged_data$partner_liked, merged_data$own_other_liked,
method = "spearman", use = "complete.obs")
merged_data %>%
ggplot(aes(x = own_liked, y = partner_other_liked)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "own_liked",
breaks = c(1:9)) +
scale_y_continuous(name = " partner_other_liked",
breaks = c(1:6))
library(correlation)
correlation(data = merged_data,
select = "own_liked",
select2 = "partner_other_liked",
method = "spearman",
alternative = "two.sided")
View(merged_data)
#分析 相关性
library(tidyverse)
# 读取数据
data <- read.csv("data/behavior/all_data_df.csv")
# 提取 liked 和 other_liked 两个问题的数据
liked_data <- data %>%
filter(question_content == "liked") %>%
select(dyad, user_id, liked = measure)
other_liked_data <- data %>%
filter(question_content == "other_liked") %>%
select(dyad, user_id, other_liked = measure)
# 在 dyad 内区分 person_1 和 person_2，可以按 user_id 排序或原始顺序
liked_data <- liked_data %>%
group_by(dyad) %>%
arrange(user_id) %>%  # 按 user_id 升序排列 dyad 内的两个人
mutate(person = row_number())
other_liked_data <- other_liked_data %>%
group_by(dyad) %>%
arrange(user_id) %>%
mutate(person = row_number())
# person_1 的 liked 和 other_liked
person1_liked <- liked_data %>% filter(person == 1) %>% select(dyad, liked_p1 = liked)
person1_other_liked <- other_liked_data %>% filter(person == 1) %>% select(dyad, other_liked_p1 = other_liked)
# person_2 的 liked 和 other_liked
person2_liked <- liked_data %>% filter(person == 2) %>% select(dyad, liked_p2 = liked)
person2_other_liked <- other_liked_data %>% filter(person == 2) %>% select(dyad, other_liked_p2 = other_liked)
# 合并成 dyad 层级的数据
dyad_data <- person1_liked %>%
left_join(person1_other_liked, by = "dyad") %>%
left_join(person2_liked, by = "dyad") %>%
left_join(person2_other_liked, by = "dyad")
# 查看合并后的数据
print(dyad_data)
# 方向1：别人是否判断我喜欢他们
# 即 person1 的 liked_p1 与 person2 猜测 person1 是否喜欢自己 (other_liked_p2)
cor_1 <- cor.test(dyad_data$liked_p1, dyad_data$other_liked_p2)
print(cor_1)
# 方向2：我是否判断别人喜欢我
# 即 person2 的 liked_p2 与 person1 猜测 person2 是否喜欢自己 (other_liked_p1)
cor_2 <- cor.test(dyad_data$liked_p2, dyad_data$other_liked_p1)
print(cor_2)
View(cor_results)
View(dyad_data)
#分析 相关性
library(tidyverse)
# 读取数据
data <- read.csv("data/behavior/all_data_df.csv")
# 提取 liked 和 other_liked 两个问题的数据
liked_data <- data %>%
filter(question_content == "liked") %>%
select(dyad, user_id, liked = measure)
other_liked_data <- data %>%
filter(question_content == "other_liked") %>%
select(dyad, user_id, other_liked = measure)
# 在 dyad 内区分 person_1 和 person_2，可以按 user_id 排序或原始顺序
liked_data <- liked_data %>%
group_by(dyad) %>%
arrange(user_id) %>%  # 按 user_id 升序排列 dyad 内的两个人
mutate(person = row_number())
other_liked_data <- other_liked_data %>%
group_by(dyad) %>%
arrange(user_id) %>%
mutate(person = row_number())
# person_1 的 liked 和 other_liked
person1_liked <- liked_data %>% filter(person == 1) %>% select(dyad, liked_p1 = liked)
person1_other_liked <- other_liked_data %>% filter(person == 1) %>% select(dyad, other_liked_p1 = other_liked)
# person_2 的 liked 和 other_liked
person2_liked <- liked_data %>% filter(person == 2) %>% select(dyad, liked_p2 = liked)
person2_other_liked <- other_liked_data %>% filter(person == 2) %>% select(dyad, other_liked_p2 = other_liked)
# 合并成 dyad 层级的数据
dyad_data <- person1_liked %>%
left_join(person1_other_liked, by = "dyad") %>%
left_join(person2_liked, by = "dyad") %>%
left_join(person2_other_liked, by = "dyad")
# 查看合并后的数据
print(dyad_data)
# 方向1：别人是否判断我喜欢他们
# 即 person1 的 liked_p1 与 person2 猜测 person1 是否喜欢自己 (other_liked_p2)
cor_1 <- cor.test(dyad_data$liked_p1, dyad_data$other_liked_p2)
print(cor_1)
# 方向2：我是否判断别人喜欢我
# 即 person2 的 liked_p2 与 person1 猜测 person2 是否喜欢自己 (other_liked_p1)
cor_2 <- cor.test(dyad_data$liked_p2, dyad_data$other_liked_p1)
print(cor_2)
merged_data %>%
ggplot(aes(x = own_liked, y = partner_other_liked)) +
geom_point() +
geom_smooth(method = "lm") +
scale_x_continuous(name = "own_liked",
breaks = c(1:9)) +
scale_y_continuous(name = " partner_other_liked",
breaks = c(1:6))
library(correlation)
correlation(data = merged_data,
select = "own_liked",
select2 = "partner_other_liked",
method = "spearman",
alternative = "two.sided")
library(correlation)
correlation(data = merged_data,
select = "own_liked",
select2 = "partner_other_liked",
method = "spearman",
alternative = "two.sided")
```
write_csv(merged_data, "all_data_dyad_prediction.csv")
